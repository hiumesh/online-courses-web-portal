create table
  public.user_profile (
    user_id uuid not null,
    username text not null,
    avatar text null,
    first_name text null,
    last_name text null,
    account_type text not null default 'default'::text,
    constraint user_profile_pkey primary key (user_id),
    constraint user_profile_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  ) tablespace pg_default;

CREATE OR REPLACE FUNCTION public.create_user(
    user_id uuid,
    username text,
    email text,
    password text,
    avatar text,
    first_name text,
    last_name text,
    account_type text
) RETURNS void AS $$
  declare
  encrypted_pw text;
BEGIN
  encrypted_pw := crypt(password, gen_salt('bf'));
  
  INSERT INTO auth.users
    (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, recovery_token, recovery_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, created_at, updated_at)
  VALUES
    ('00000000-0000-0000-0000-000000000000', user_id, 'authenticated', 'authenticated', email, encrypted_pw, '2023-05-03 19:41:43.585805+00', '', '2023-04-22 13:10:03.275387+00', '2023-04-22 13:10:31.458239+00', '{"provider":"email","providers":["email"]}', '{}', '2023-05-03 19:41:43.580424+00', '2023-05-03 19:41:43.585948+00');
  
  INSERT INTO auth.identities (id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at)
  VALUES
    (user_id, user_id, format('{"sub":"%s","email":"%s"}', user_id::text, email)::jsonb, 'email', '2023-05-03 19:41:43.582456+00', '2023-05-03 19:41:43.582497+00', '2023-05-03 19:41:43.582497+00');

  INSERT INTO public.user_profile (user_id, username, avatar, first_name, last_name, account_type) VALUES (user_id, username, avatar, first_name, last_name, account_type);
END;
$$ LANGUAGE plpgsql;


create table
  public.category (
    id bigint generated by default as identity not null,
    name text not null,
    description text null,
    created_at timestamp with time zone null default now(),
    constraint category_pkey primary key (id),
    constraint category_name_key unique (name)
  ) tablespace pg_default;

create table
  public.sub_category (
    id bigint generated by default as identity not null,
    name text not null,
    description text null,
    category_id bigint not null,
    created_at timestamp with time zone null default now(),
    constraint sub_category_pkey primary key (id),
    constraint sub_category_name_and_category_id_composite_key unique (name, category_id),
    constraint sub_category_category_id_fkey foreign key (category_id) references category (id) on delete cascade
  ) tablespace pg_default;

create table
  public.topics (
    id bigint generated by default as identity not null,
    name text not null,
    description text null,
    sub_category bigint not null,
    created_at timestamp with time zone null default now(),
    constraint tags_pkey primary key (id),
    constraint tags_name_key unique (name),
    constraint topics_category_fkey foreign key (sub_category) references sub_category (id) on delete cascade
  ) tablespace pg_default;

create table
  public.courses (
    id bigint generated by default as identity not null,
    image text null,
    title text not null,
    short_description text null,
    category bigint not null,
    sub_category bigint not null,
    long_description text null,
    requirements text null,
    course_purpose text null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp with time zone null default now(),
    language text not null,
    course_promises json null,
    constraint courses_pkey primary key (id),
    constraint courses_category_fkey foreign key (category) references category (id) on delete restrict,
    constraint courses_sub_category_fkey foreign key (sub_category) references sub_category (id) on delete restrict
  ) tablespace pg_default;

create table
  public.course_instructor (
    course_id bigint not null,
    user_id uuid not null,
    constraint course_instructor_pkey primary key (course_id, user_id),
    constraint course_instructor_course_id_fkey foreign key (course_id) references courses (id) on delete cascade,
    constraint course_instructor_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  ) tablespace pg_default;

create table
  public.enrollment (
    course_id bigint generated by default as identity not null,
    user_id uuid not null,
    id bigint generated by default as identity not null,
    created_at timestamp with time zone null default now(),
    constraint enrollment_pkey primary key (course_id, user_id),
    constraint enrollment_id_key unique (id),
    constraint enrollment_course_id_fkey foreign key (course_id) references courses (id) on delete cascade,
    constraint enrollment_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  ) tablespace pg_default;

create table
  public.course_review (
    id bigint generated by default as identity not null,
    rating real not null,
    user_id uuid not null,
    course_id bigint not null,
    body text not null,
    created_at timestamp with time zone null default now(),
    constraint course_review_pkey primary key (id),
    constraint course_review_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade,
    constraint course_review_course_id_fkey foreign key (course_id) references courses (id) on delete cascade,
    constraint course_review_user_id_and_course_id_composite_key unique (user_id, course_id)
  ) tablespace pg_default;

